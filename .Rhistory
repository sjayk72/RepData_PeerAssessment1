g + geom_point(aes(color=drv), labs(title="Swirl Rules!"), labs(x = "Displacement", y = "Hwy Mileage"))
g + geom_point(aes(color=drv), labs(title="Swirl Rules!", x = "Displacement", y = "Hwy Mileage"))
g + geom_point(aes(color=drv), labs(title="Swirl Rules!", x = "Displacement", y = "Hwy Mileage"))
g + geom_point(aes(color=drv), labs(title="Swirl Rules!"), labs(setting x = "Displacement", setting y = "Hwy Mileage"))
g + geom_point(aes(color=drv) + labs(title="Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage"))
g + geom_point(aes(color=drv)) + labs(title="Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color=drv), set=2, alpha=.5) + geom_smooth(size=4, linetype=3, method = "lm", se=FALSE)
g + geom_point(aes(color=drv), set=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method = "lm", se=FALSE)
g + geom_point(aes(color=drv), size=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method = "lm", se=FALSE)
g + geom_point(aes(color=drv)) + theme_bw(base_family = "Times")
warnings()
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(data = testdat, aes(x=myx, y=myy))
g + geom_line(g=0)
g + geom_line()
g + geom_line(ylim(-3,3))
g + geom_line(aes(ylim(-3,3))
)
g + geom_line(ylim(-3,3))
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim(-3,3))
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(data = mpg, aes(x=displ, y=hwy, color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se=FALSE, size=2, color=black)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se=FALSE, size=2, color="black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se=FALSE, size=2, color="black") + labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
librea
library(swirl)
swirl()
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth=18497/30)
brk
counts
qplot(price, data = diamonds, binwidth=18497/30, fill=cut)
qplot(price, data = diamonds, geom="density")
qplot(price, data = diamonds, geom="density", color=cut)
qplot(carat, price, data = dataset)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape=cut)
qplot(carat, price, data = diamonds, color=cut)
qplot(carat, price, data = diamonds, color=cut, geom = "lm")
qplot(carat, price, data = diamonds, color=cut, geom_smooth = "lm")
qplot(carat, price, data = diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat, price, data = diamonds, color=cut, facets = .~cut) + geom_smooth(method="lm")
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(data = diamonds, aes(depth,price))
g + geom_point(alpha=1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha=1/3) + facet_grid(cut ~ car2) + geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=.4, col="red")
5
5
abline(h=.05, col="green")
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
library(swirl)
swirl()
cmat
points(cx, cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "red", "green"), pch=3, cex=3, lwd=3)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1]%*%svd1$d[1])*t(svd1$v)
a1 <- (svd1$u[,1]*svd1$d[1])%*%t(svd1$v)
a1 <- (svd1$u[,1]*svd1$d[1])%*%t(svd1$v[,1])
myImage(a1)
a1 <- svd1$u[,1:2]%*%svd1$d[1:2,]%*%t(svd1$v[,1:2])
a1 <- svd1$u[,1:2]%*%svd1$d[1:2]%*%t(svd1$v[,1:2])
a2 <- svd1$u[,1:2]%*%svd1$d[1:2]%*%t(svd1$v[,1:2])
a2 <- svd1$u[,1:2]%*%diag(svd1$d[1:2])%*%t(svd1$v[,1:2])
myImage(a2)
a5 <- svd1$u[,1:5]%*%diag(svd1$d[1:5])%*%t(svd1$v[,1:5])
myImage(svd1$u[,1:5]%*%diag(svd1$d[1:5])%*%t(svd1$v[,1:5]))
myImage(svd1$u[,1:10]%*%diag(svd1$d[1:10])%*%t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject=1)
sub1 <- subset(ssd, subject==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
play()
head(mdist)
summary(mdist)
str(mdist)
dim(mdist)
mdist
mdist <- dist(sub1[,1])
mdist
mdist <- dist(sub1[,1:3])
mdist1 <- dist(sub1[,1])
nxt()
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(sub1, scale(sub1[,-c(562,563)]))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,10:12])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(257,258)], centers = 6)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch=19, ylab="Walkdown Cluster")
setwd("~/GitHub/RepData_PeerAssessment1")
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv")
unzip(zipfile="activity.zip")
df <- read.csv("activity.csv")
head(df)
table(df)
str(df)
summary(df)
mean(is.na(df$steps))
sum(is.na(df$steps))
spd <- with(df, tapply(steps, date, sum, na.rm=TRUE))
hist(spd)
range(df$date)
unique((df$date))
hist(df, xlim=61)
hist(df, breaks = 61)
hist(spd, xlim=61)
hist(spd, breaks = 61)
xlab=unique(df$date)
hist(spd, breaks = 61, xlab=unique(df$date))
library(ggplot2)
qplot(spd)
qplot(spd, bins=61)
spd
summary(spd)
hist(spd, breaks = 61, xlab=unique(df$date))
head(spd)
head(df)
hist(spd, breaks = 61, freq=TRUE)
hist(spd, breaks = unique(df$date), freq=TRUE)
hist(spd, breaks = as.numeric(unique(df$date)), freq=TRUE)
hist(spd, breaks = 61, xlab="Steps per day")
hist(spd, breaks = 61, main=" Total number of steps taken per day", xlab="Steps per day")
hist(spd, breaks = 61, main=" Total number of steps taken per day", xlab="Steps per day", ylab="Total steps in thousands")
barplot(spd)
plot(spd)
plot(spd, type=h)
plot(spd, type="h")
mean(spd)
median(spd)
median(spd, na.rm=TRUE)
mean(spd, na.rm=TRUE)
hist(spd, breaks = 61, main=" Total number of steps taken per day", xlab="Steps per day", ylab="Total steps in thousands")
hist(spd, breaks = 61, main=" Total number of steps taken per day", xlab="Steps per day", ylab="Total steps in thousands")
hist(spd, breaks = 61, main=" Total number of steps taken per day", xlab="Steps per day", ylab="Total steps in thousands")
mean(spd)
median(spd)
paste("Mean = ", mean(spd))
paste("Mean = ", mean(spd))
paste("Median = ", median(spd))
paste("Mean =", mean(spd))
paste("Median =", median(spd))
unique(df$interval)
dap <- tapply(df$steps, df$interval, mean, na.rm=TRUE)
str(dap)
names(dap)
summary(dap)
dap$5
dap[5,]
spd <- aggregate(steps, date, sum, na.rm=TRUE)
Make a time series plot (i.e.Â 
type = "l"
) of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
spd <- aggregate(steps, date, sum, na.rm=TRUE)
spd <- aggregate(df$steps, df$date, sum, na.rm=TRUE)
spd <- aggregate(df$steps, by=df$date, sum, na.rm=TRUE)
spd <- aggregate(steps ~ date, data = df, FUN = sum, na.rm=TRUE)
head(spd)
hist(spd)
hist(spd$steps)
with(spd(hist(date~steps))
)
with(spd(hist(date~steps))
)
hist(spd$date~spd$steps)
hist(spd$steps, xname=spd$date)
hist(spd$steps, xname=spd$date)
qplot(spd$date, spd$steps)
dap <- aggregate(x = list(steps = df$steps), by = list(interval = df$interval),
FUN = mean, na.rm = TRUE)
str(dap)
head(dap)
dap$interval[5,]
plot(dap$interval, dap$steps, type="l", xlab="intervals (hours)", ylab="mean of steps",
main="Average daily activity pattern")
plot(dap$interval, dap$steps, type="l", xlab="intervals (hours)", ylab="average number of steps taken", main="Average daily activity pattern")
summary(dap)
which.max(dap)
dap[which.max(dap$steps)]
dap[which.max(dap$steps),]
sum(is.na(df$steps))
sum(is.na(df$date))
sum(is.na(df$interval))
head(dap)
sum(is.na(df))
df1 <- with(df, tapply(steps, date, sum))
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps) else filled <- (spd[spd$interval == interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps) else filled <- (spd[spd$interval == interval, "steps"])
return(filled)
}
filled.data <- df
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
summary(filled.data)
head(filled.data)
str(filled.data)
head(dap)
summary(dap)
sum(is.na(dap))
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps) else filled <- (dap[dap$interval == interval, "steps"])
return(filled)
}
filled.data <- df
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
head(filled.data)
head(df)
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps) else filled <- (dap[dap$interval == interval, "steps"])
return(filled)
}
fill.df <- df
fill.df$steps <- mapply(fill.value, fill.df$steps, fill.df$interval)
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
fill <- c(steps) else fill <- (dap[dap$interval == interval, "steps"])
return(fill)
}
fill.df <- df
fill.df$steps <- mapply(fill.value, fill.df$steps, fill.df$interval)
fill.value <- function(steps, interval) {
fill <- NA
if (!is.na(steps))
fill <- c(steps) else fill <- (dap[dap$interval == interval, "steps"])
return(fill)
}
fill.df <- df
fill.df$steps <- mapply(fill.value, fill.df$steps, fill.df$interval)
fill.value <- function(steps, interval) {
#fill <- NA
if (!is.na(steps))
fill <- c(steps) else fill <- (dap[dap$interval == interval, "steps"])
return(fill)
}
fill.df <- df
fill.df$steps <- mapply(fill.value, fill.df$steps, fill.df$interval)
summary(fill.df)
fill.steps <- function(steps, interval) {
if (!is.na(steps))
fill <- c(steps) else fill <- (dap[dap$interval == interval, "steps"])
return(fill)
}
fill.df <- df
fill.df$steps <- mapply(fill.steps, fill.df$steps, fill.df$interval)
fill.steps <- function(steps, interval) {
if (!is.na(steps))
fill <- c(steps) else fill <- (dap[dap$interval == interval,])
return(fill)
}
fill.df <- df
fill.df$steps <- mapply(fill.steps, fill.df$steps, fill.df$interval)
summary(fill.df)
fill.steps <- function(steps, interval) {
if (!is.na(steps))
fill <- c(steps) else fill <- (dap[dap$interval == interval, "steps"])
return(fill)
}
fill.df <- df
fill.df$steps <- mapply(fill.steps, fill.df$steps, fill.df$interval)
summary(fill.df)
fill.steps <- function(steps, interval) {
if (!is.na(steps))
fill <- c(steps) else fill <- (dap[dap$interval == interval, steps])
return(fill)
}
fill.df <- df
fill.df$steps <- mapply(fill.steps, fill.df$steps, fill.df$interval)
summary(fill.df)
fill.steps <- function(steps, interval) {
if (!is.na(steps))
fill <- c(steps) else fill <- (dap[dap$interval == interval, "steps"])
return(fill)
}
fill.df <- df
fill.df$steps <- mapply(fill.steps, fill.df$steps, fill.df$interval)
summary(fill.df)
spd <- with(fill.df, tapply(steps, date, sum))
hist(spd, breaks = 61, main=" Total number of steps taken per day", xlab="Steps per day", ylab="Total steps in thousands")
spd <- with(fill.df, tapply(steps, date, sum))
hist(spd, breaks = 61, main=" Total number of steps taken per day", xlab="Steps per day", ylab="Total steps in thousands")
paste("Mean =", mean(spd))
paste("Median =", median(spd))
spd <- with(fill.df, tapply(steps, date, sum))
hist(spd, breaks = 61, main=" Total number of steps taken per day", xlab="Steps per day", ylab="Total steps in thousands")
paste("Mean =", mean(spd))
paste("Median =", median(spd))
spd <- with(fill.df, tapply(steps, date, sum))
hist(spd, breaks = 61, main=" Total number of steps taken per day", xlab="Steps per day", ylab="Total steps in thousands")
paste("Mean =", mean(spd))
paste("Median =", median(spd))
spd.new <- with(fill.df, tapply(steps, date, sum))
hist(spd.new, breaks = 61, main=" Total number of steps taken per day", xlab="Steps per day", ylab="Total steps in thousands")
paste("Mean =", mean(spd))
paste("Median =", median(spd))
paste("New Mean =", mean(spd.new))
paste("New Median =", median(spd.new))
spd <- with(df, tapply(steps, date, sum, na.rm=TRUE))
paste("Mean =", mean(spd))
paste("Median =", median(spd))
paste("New Mean =", mean(spd.new))
paste("New Median =", median(spd.new))
paste("Mean =", mean(spd))
paste("New Mean =", mean(spd.new))
paste("Median =", median(spd))
paste("New Median =", median(spd.new))
paste(list("Mean =", mean(spd)))
paste("New Mean =", mean(spd.new))
paste("Median =", median(spd))
paste("New Median =", median(spd.new))
paste("Mean =", mean(spd))
paste("New Mean =", mean(spd.new))
paste("Median =", median(spd))
paste("New Median =", median(spd.new))
sprintf("%s is $ %3.2f ", "Mean", mean(spd))
paste("Mean =", mean(spd))
paste("New Mean =", mean(spd.new))
paste("Median =", median(spd))
paste("New Median =", median(spd.new))
sprintf("%s is %3.2f", "Mean", mean(spd))
paste("Mean =", mean(spd))
paste("New Mean =", mean(spd.new))
paste("Median =", median(spd))
paste("New Median =", median(spd.new))
sprintf("%s is %3.2f", "Mean", mean(spd))
sprintf("%s is %3.2f", "New Mean", mean(spd.new))
sprintf("%s is %3.2f", "Median", median(spd))
sprintf("%s is %3.2f", "New Median", median(spd.new))
sprintf("%s is %3.2f", "Mean", mean(spd))
sprintf("%s is %3.2f", "Median", median(spd))
spd.new
head(spd.new)
head(spd)
head(fill.df)
weekdays(fill.df$date[1])
weekdays(2012-10-02)
weekdays("2012-10-02")
weekdays(as.Date(2012-10-02))
today
today()
now()
Date()
Sys.Date()
weekdays(Sys.Date())
dayType <- function(date) {
day <- weekdays(date)
if (day %in% c("Saturday", "Sunday")) return("weekend") else return("weekday")
}
fill.df$date <- as.Date(fill.df$date)
fill.df$day <- sapply(fill.df$date, FUN = dayType)
summary(fill.df)
unique(fill.df$day)
sum(is.na(fill.df))
library(lattice)
fill.df <- transform(fill.df, day=factor(dayType))
fill.df <- transform(fill.df, day=factor(day))
densityplot(steps ~ interval | day, data=fill.df, layout=c(2,1))
densityplot(steps ~ interval | day, data=fill.df, layout=c(1,2))
xyplot(steps ~ interval | day, data=fill.df, layout=c(1,2))
xyplot(steps ~ interval | day, data=fill.df, type="l", layout=c(1,2))
xyplot(steps ~ interval | day, data=fill.df, type="smooth", layout=c(1,2))
xyplot(steps ~ interval | day, data=fill.df, type="l", layout=c(1,2))
xyplot(steps ~ interval, data=fill.df, type="l", layout=c(1,2))
mean.step <- aggregate(steps ~ interval + day, data = fill.df, mean)
ggplot(mean.step, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
mean.step <- aggregate(steps ~ interval + day, data = fill.df, mean)
ggplot(mean.step, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
mean.step <- aggregate(steps ~ interval + day, data = fill.df, mean)
ggplot(mean.step, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
dap <- aggregate(x = list(steps = df$steps), by = list(interval = df$interval), FUN = mean, na.rm = TRUE)
plot(dap$interval, dap$steps, type="l", xlab="intervals (hours)", ylab="average number of steps taken", main="Average daily activity pattern")
dap <- aggregate(x = list(steps = df$steps), by = list(interval = df$interval), FUN = mean, na.rm = TRUE)
plot(dap$interval, dap$steps, type="l", xlab="intervals (hours)", ylab="average number of steps taken", main="Average daily activity pattern")
unzip(zipfile="activity.zip")
df <- read.csv("activity.csv")
spd <- with(df, tapply(steps, date, sum, na.rm=TRUE))
hist(spd, breaks = 61, main=" Total number of steps taken per day", xlab="Steps per day", ylab="Total steps in thousands")
sprintf("%s is %3.2f", "Mean", mean(spd))
sprintf("%s is %3.2f", "Median", median(spd))
dap <- aggregate(x = list(steps = df$steps), by = list(interval = df$interval), FUN = mean, na.rm = TRUE)
plot(dap$interval, dap$steps, type="l", xlab="intervals (hours)", ylab="average number of steps taken", main="Average daily activity pattern")
dap[which.max(dap$steps),]
sum(is.na(df))
fill.steps <- function(steps, interval) {
if (!is.na(steps))
fill <- c(steps) else fill <- (dap[dap$interval == interval, "steps"])
return(fill)
}
fill.df <- df
fill.df$steps <- mapply(fill.steps, fill.df$steps, fill.df$interval)
spd.new <- with(fill.df, tapply(steps, date, sum))
hist(spd.new, breaks = 61, main=" Total number of steps taken per day", xlab="Steps per day", ylab="Total steps in thousands")
sprintf("%s is %3.2f", "Mean", mean(spd))
sprintf("%s is %3.2f", "New Mean", mean(spd.new))
sprintf("%s is %3.2f", "Median", median(spd))
sprintf("%s is %3.2f", "New Median", median(spd.new))
dayType <- function(date) {
day <- weekdays(date)
if (day %in% c("Saturday", "Sunday")) return("weekend") else return("weekday")
}
fill.df$date <- as.Date(fill.df$date)
fill.df$day <- sapply(fill.df$date, FUN = dayType)
mean.step <- aggregate(steps ~ interval + day, data = fill.df, mean)
ggplot(mean.step, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
